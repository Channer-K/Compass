# -*- coding: utf-8 -*-
from django import template
from django.utils import timezone

register = template.Library()


@register.filter(name='ellipses')
def ellipses(value, arg):
    original_string = value
    max_length = arg

    if len(original_string) <= max_length:
        return original_string
    else:
        return original_string[:max_length] + "..."


@register.filter(name='get_due_date_string')
def get_due_date_string(value):
    delta = timezone.now() - value

    if delta.days == 0:
        hours = abs(delta.seconds / 3600)
        if hours == 0:
            return "just now"
        return "about %s %s ago" % (hours, (
            "hour" if hours == 1 else "hours"))
    elif delta.days > 1:
        return "%s %s ago" % (abs(delta.days), (
            "day" if abs(delta.days) == 1 else "days"))


@register.filter(name='mod')
def mod(value, arg):
    return value % arg


@register.filter(name='can_execute')
def can_execute(subtask, user):

    if not subtask.editable or not subtask.task.editable:
        return False

    ctrl_cls = subtask.get_ctrl_cls()

    if ctrl_cls.can_execute(subtask, user):
        return ctrl_cls

    return False


from django.template import Node, resolve_variable

"""
The tag generates a parameter string in form '?param1=val1&param2=val2'.
The parameter list is generated by taking all parameters from current
request.GET and optionally overriding them by providing parameters to the tag.

This is a cleaned up version of http://djangosnippets.org/snippets/2105/. It
solves a couple of issues, namely:
 * parameters are optional
 * parameters can have values from request, e.g. request.GET.foo
 * native parsing methods are used for better compatibility and readability
 * shorter tag name

Usage: place this code in your appdir/templatetags/add_get_parameter.py
In template:
{% load add_get_parameter %}
<a href="{% add_get param1='const' param2=variable_in_context %}">
Link with modified params
</a>

It's required that you have 'django.core.context_processors.request' in
TEMPLATE_CONTEXT_PROCESSORS

Original version's URL: http://django.mar.lt/2010/07/add-get-parameter-tag.html
"""


class AddGetParameter(Node):
    def __init__(self, values):
        self.values = values

    def render(self, context):
        req = resolve_variable('request', context)
        params = req.GET.copy()
        for key, value in self.values.items():
            resolved = value.resolve(context)
            if resolved:
                params[key] = value.resolve(context)
        return '?%s' % params.urlencode()


@register.tag
def add_get(parser, token):
    pairs = token.split_contents()[1:]
    values = {}
    for pair in pairs:
        s = pair.split('=', 1)
        values[s[0]] = parser.compile_filter(s[1])
    return AddGetParameter(values)
